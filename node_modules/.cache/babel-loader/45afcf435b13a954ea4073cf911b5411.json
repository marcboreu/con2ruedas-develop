{"ast":null,"code":"var _jsxFileName = \"/Users/marcboreu/Desktop/Webs - Develop/test app/con2ruedas/src/components/layouts/Pagination.js\";\nimport React from 'react';\nimport { Link } from '@reach/router';\nimport { createPaginationArray } from \"../../utils/functions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Pagination = props => {\n  const {\n    currentPage,\n    totalPages,\n    setCurrentPage\n  } = props;\n  const isThereNextPage = currentPage < totalPages;\n  const isTherePreviousPage = currentPage > 1;\n  const paginationArray = createPaginationArray(currentPage, totalPages);\n\n  const getPageLink = pageNo => {\n    return `/page/${pageNo}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagination\",\n    children: [isTherePreviousPage && /*#__PURE__*/_jsxDEV(Link, {\n      to: getPageLink(currentPage - 1),\n      onClick: () => setCurrentPage(currentPage - 1),\n      className: \"prev\",\n      children: \"Previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 29\n    }, this), paginationArray && paginationArray.map((item, index) => {\n      // If item is not equal to '...' and the item value is not equal to current page.\n      if ('...' !== item && currentPage !== item) {\n        return (\n          /*#__PURE__*/\n          // Page number links.\n          _jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: getPageLink(item),\n              onClick: () => setCurrentPage(item),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"page-no\",\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 8\n            }, this)\n          }, `${item}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 7\n          }, this)\n        );\n      } else {\n        return (\n          /*#__PURE__*/\n          // if its '...' or the current page, it should not be clickable ( should not be a link )\n          _jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: currentPage === item ? 'page-no active' : '',\n              children: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 8\n            }, this)\n          }, `${item}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 7\n          }, this)\n        );\n      }\n    }), isThereNextPage && /*#__PURE__*/_jsxDEV(Link, {\n      to: getPageLink(currentPage + 1),\n      onClick: () => setCurrentPage(currentPage + 1),\n      className: \"next\",\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this);\n};\n_c = Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"sources":["/Users/marcboreu/Desktop/Webs - Develop/test app/con2ruedas/src/components/layouts/Pagination.js"],"names":["React","Link","createPaginationArray","Pagination","props","currentPage","totalPages","setCurrentPage","isThereNextPage","isTherePreviousPage","paginationArray","getPageLink","pageNo","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,qBAAT,QAAsC,uBAAtC;;AAEA,OAAO,MAAMC,UAAU,GAAKC,KAAF,IAAa;AAEtC,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,MAA8CH,KAApD;AAEA,QAAMI,eAAe,GAAOH,WAAW,GAAGC,UAA1C;AACA,QAAMG,mBAAmB,GAAGJ,WAAW,GAAG,CAA1C;AACA,QAAMK,eAAe,GAAOR,qBAAqB,CAAEG,WAAF,EAAeC,UAAf,CAAjD;;AAEA,QAAMK,WAAW,GAAKC,MAAF,IAAc;AACjC,WAAQ,SAAQA,MAAO,EAAvB;AACA,GAFD;;AAIA,sBACC;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,eACGH,mBAAmB,iBAAI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAGE,WAAW,CAAEN,WAAW,GAAG,CAAhB,CAAtB;AAA4C,MAAA,OAAO,EAAG,MAAME,cAAc,CAAEF,WAAW,GAAG,CAAhB,CAA1E;AAAgG,MAAA,SAAS,EAAC,MAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAD1B,EAGGK,eAAe,IACjBA,eAAe,CAACG,GAAhB,CAAqB,CAAEC,IAAF,EAAQC,KAAR,KAAmB;AACvC;AACA,UAAK,UAAUD,IAAV,IAAkBT,WAAW,KAAKS,IAAvC,EAA+C;AAE9C;AAAA;AACC;AACA,kBAAC,KAAD,CAAO,QAAP;AAAA,mCACC,QAAC,IAAD;AACC,cAAA,EAAE,EAAGH,WAAW,CAAEG,IAAF,CADjB;AAEC,cAAA,OAAO,EAAG,MAAMP,cAAc,CAAEO,IAAF,CAF/B;AAAA,qCAIC;AAAM,gBAAA,SAAS,EAAC,SAAhB;AAAA,0BAA4BA;AAA5B;AAAA;AAAA;AAAA;AAAA;AAJD;AAAA;AAAA;AAAA;AAAA;AADD,aAAuB,GAAGA,IAAM,IAAIC,KAAO,EAA3C;AAAA;AAAA;AAAA;AAAA;AAFD;AAWA,OAbD,MAaO;AACN;AAAA;AACC;AACA;AAAA,mCACC;AAAM,cAAA,SAAS,EAAGV,WAAW,KAAKS,IAAhB,GAAuB,gBAAvB,GAA0C,EAA5D;AAAA,wBAAmEA;AAAnE;AAAA;AAAA;AAAA;AAAA;AADD,aAAa,GAAGA,IAAM,IAAIC,KAAO,EAAjC;AAAA;AAAA;AAAA;AAAA;AAFD;AAMA;AACD,KAvBD,CAJD,EA4BGP,eAAe,iBAAI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAGG,WAAW,CAAEN,WAAW,GAAG,CAAhB,CAAtB;AAA4C,MAAA,OAAO,EAAG,MAAME,cAAc,CAAEF,WAAW,GAAG,CAAhB,CAA1E;AAAgG,MAAA,SAAS,EAAC,MAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BtB;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAgCA,CA5CM;KAAMF,U","sourcesContent":["import React from 'react';\nimport { Link } from '@reach/router';\nimport { createPaginationArray } from \"../../utils/functions\";\n\nexport const Pagination = ( props ) => {\n\n\tconst { currentPage, totalPages, setCurrentPage } = props;\n\n\tconst isThereNextPage     = currentPage < totalPages;\n\tconst isTherePreviousPage = currentPage > 1;\n\tconst paginationArray     = createPaginationArray( currentPage, totalPages );\n\n\tconst getPageLink = ( pageNo ) => {\n\t\treturn `/page/${pageNo}`;\n\t};\n\n\treturn (\n\t\t<div className=\"pagination\">\n\t\t\t{ isTherePreviousPage && <Link to={ getPageLink( currentPage - 1 ) } onClick={ () => setCurrentPage( currentPage - 1 ) } className=\"prev\">Previous</Link> }\n\n\t\t\t{ paginationArray &&\n\t\t\tpaginationArray.map( ( item, index ) => {\n\t\t\t\t// If item is not equal to '...' and the item value is not equal to current page.\n\t\t\t\tif ( '...' !== item && currentPage !== item  ) {\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t// Page number links.\n\t\t\t\t\t\t<React.Fragment key={ `${ item }-${ index }` }>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto={ getPageLink( item ) }\n\t\t\t\t\t\t\t\tonClick={ () => setCurrentPage( item ) }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className=\"page-no\">{ item }</span>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t// if its '...' or the current page, it should not be clickable ( should not be a link )\n\t\t\t\t\t\t<span key={ `${ item }-${ index }` }>\n\t\t\t\t\t\t\t<span className={ currentPage === item ? 'page-no active' : '' }>{ item }</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} ) }\n\t\t\t{ isThereNextPage && <Link to={ getPageLink( currentPage + 1 ) } onClick={ () => setCurrentPage( currentPage + 1 ) } className=\"next\">Next</Link> }\n\t\t</div>\n\t)\n};\n"]},"metadata":{},"sourceType":"module"}